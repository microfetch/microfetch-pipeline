from django.db import models
from enum import Enum

LENGTH_ACCESSION = 40
LENGTH_MEDIUM = 1024#256
LENGTH_LONG = 4096


class AssemblyStatus(Enum):
    UNDER_CONSIDERATION = 'under consideration'
    IN_PROGRESS = 'in progress'
    FAIL = 'fail'
    SUCCESS = 'success'


class Taxons(models.Model):
    taxon_id = models.PositiveBigIntegerField(primary_key=True)
    last_updated = models.DateTimeField(null=True)
    time_added = models.DateTimeField(auto_now_add=True)


class AccessionNumbers(models.Model):
    taxon_id = models.ForeignKey("Taxons", on_delete=models.DO_NOTHING)
    accession_id = models.CharField(primary_key=True, max_length=LENGTH_MEDIUM)
    accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    experiment_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    run_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    sample_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    secondary_sample_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    fastq_ftp = models.CharField(null=True, max_length=LENGTH_LONG)
    passed_filter = models.BooleanField(null=True)
    filter_failed = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    time_fetched = models.DateTimeField(auto_now_add=True)
    waiting_since = models.DateTimeField(null=True)
    assembly_result = models.CharField(
        choices=[(s.value, s.value) for s in AssemblyStatus],
        null=True,
        max_length=LENGTH_ACCESSION
    )
    assembled_genome_url = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    assembly_report_url = models.CharField(null=True, max_length=LENGTH_MEDIUM)


class RecordDetails(models.Model):
    accession_id = models.ForeignKey("AccessionNumbers", on_delete=models.DO_NOTHING)
    time_fetched = models.DateTimeField(auto_now_add=True)
    # Fields as retrieved from ENA database
    accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    altitude = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    assembly_quality = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    assembly_software = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    base_count = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    binning_software = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    bio_material = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    broker_name = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    cell_line = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    cell_type = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    center_name = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    checklist = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    collected_by = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    collection_date = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    collection_date_submitted = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    completeness_score = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    contamination_score = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    country = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    cram_index_ftp = models.CharField(null=True, max_length=LENGTH_LONG)
    cram_index_aspera = models.CharField(null=True, max_length=LENGTH_LONG)
    cram_index_galaxy = models.CharField(null=True, max_length=LENGTH_LONG)
    cultivar = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    culture_collection = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    depth = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    dev_stage = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    description = models.CharField(null=True, max_length=LENGTH_LONG)
    ecotype = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    elevation = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    environment_biome = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    environment_feature = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    environment_material = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    environmental_package = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    environmental_sample = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    experiment_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    experiment_alias = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    experiment_title = models.CharField(null=True, max_length=LENGTH_LONG)
    experimental_factor = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    fastq_bytes = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    fastq_md5 = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    fastq_ftp = models.CharField(null=True, max_length=LENGTH_LONG)
    fastq_aspera = models.CharField(null=True, max_length=LENGTH_LONG)
    fastq_galaxy = models.CharField(null=True, max_length=LENGTH_LONG)
    first_created = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    first_public = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    germline = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_body_site = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_genotype = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_growth_conditions = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_gravidity = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_phenotype = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_sex = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_status = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    host_tax_id = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    identified_by = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    instrument_model = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    instrument_platform = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    investigation_type = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    isolate = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    isolation_source = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    last_updated = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    lat = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    lon = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    library_construction_protocol = models.CharField(null=True, max_length=LENGTH_LONG)
    library_layout = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    library_name = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    library_selection = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    library_source = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    library_strategy = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    location = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    mating_type = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    nominal_length = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    nominal_sdev = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    parent_study = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    ph = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    project_name = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    protocol_label = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    read_count = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    run_accession = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    run_alias = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    salinity = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sample_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    sample_alias = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sample_capture_status = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sample_collection = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sample_description = models.CharField(null=True, max_length=LENGTH_LONG)
    sample_material = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sample_title = models.CharField(null=True, max_length=LENGTH_LONG)
    sampling_campaign = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sampling_platform = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sampling_site = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    scientific_name = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    secondary_sample_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    secondary_study_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    sequencing_method = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    serotype = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    serovar = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sex = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    specimen_voucher = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sra_bytes = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sra_md5 = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sra_ftp = models.CharField(null=True, max_length=LENGTH_LONG)
    sra_aspera = models.CharField(null=True, max_length=LENGTH_LONG)
    sra_galaxy = models.CharField(null=True, max_length=LENGTH_LONG)
    strain = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    study_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    study_alias = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    study_title = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sub_species = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    sub_strain = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    submission_accession = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    submission_tool = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    submitted_bytes = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    submitted_md5 = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    submitted_ftp = models.CharField(null=True, max_length=LENGTH_LONG)
    submitted_aspera = models.CharField(null=True, max_length=LENGTH_LONG)
    submitted_galaxy = models.CharField(null=True, max_length=LENGTH_LONG)
    submitted_format = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    submitted_host_sex = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    submitted_sex = models.CharField(null=True, max_length=LENGTH_ACCESSION)
    target_gene = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    taxonomic_classification = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    taxonomic_identity_marker = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    tax_id = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    taxonomy = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    temperature = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    tissue_lib = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    tissue_type = models.CharField(null=True, max_length=LENGTH_MEDIUM)
    variety = models.CharField(null=True, max_length=LENGTH_MEDIUM)
